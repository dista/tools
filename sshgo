#!/usr/bin/env ruby

# encoding: UTF-8

require 'json'

Signal.trap("INT") { 
  exit
}

def print_usage
  print <<-eos
Usage:
sshgo COMMAND
COMMANDS:
  list        -- list all destiny, shortcut 'l'
  go DESTINY  -- go to the destiny, shortcut 'g'
  help        -- print this
eos
abort
end

def load_config
  default_config_file = "#{Dir.home}/.shuttle.json"

  config = JSON.parse(File.read(default_config_file))
end

def print_cmd(lv1obj, state)
  space = '  ' * state
  lv1obj.each do |cmd|
    if cmd.key? 'cmd'
      print "#{space}\u2022 #{cmd['name']}\n"
    else
      cmd.each do |lv, obj|
        print "#{space}\u2630 #{lv}\n"
        print_cmd(obj, state + 1)
      end
    end
  end
end

def list_config
  config = load_config
  config.each do |lv1, lv1obj|
    if lv1 == 'hosts'
      print_cmd(lv1obj, 1)
    end
  end
end

def find_cmd(lv1obj, remote)
  ret = nil

  lv1obj.each do |cmd|
    if cmd.key? 'cmd'
      if cmd['name'].start_with? remote
        ret = cmd
      end
    else
      cmd.each do |lv, obj|
        ret = find_cmd(obj, remote)
        break if ret
      end
    end

    break if ret
  end

  ret
end

def go_ssh(remote)
  config = load_config

  terminal = config['terminal']

  ssh_config = nil
  config.each do |lv1, lv1obj|
    if lv1 == 'hosts'
      ssh_config = find_cmd(lv1obj, remote)
    end
  end

  if !ssh_config
    return
  end

  system "#{terminal} -e \"#{ssh_config['cmd']}\" -t #{ssh_config['name']} --tab"
end

if ARGV.length < 1
  print_usage
end

cmd = ARGV[0]
  if not ['list', 'l', 'go', 'g', 'help'].include? cmd
  print_usage
end

case cmd
when 'l'
  cmd = 'list'
when 'g'
  cmd = 'go'
end

case cmd
when 'list'
  list_config
when 'go'
  if ARGV[1] == nil
    print_usage
  end
 
  go_ssh(ARGV[1])
when 'help'
  print_usage
end
